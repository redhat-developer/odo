/*
 * odo dev
 *
 * API interface for 'odo dev'
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Annotation struct {
	Deployment map[string]string `json:"deployment"`

	Service map[string]string `json:"service"`
}

// AssertAnnotationRequired checks if the required fields are not zero-ed
func AssertAnnotationRequired(obj Annotation) error {
	elements := map[string]interface{}{
		"deployment": obj.Deployment,
		"service":    obj.Service,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseAnnotationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Annotation (e.g. [][]Annotation), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAnnotationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAnnotation, ok := obj.(Annotation)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAnnotationRequired(aAnnotation)
	})
}
