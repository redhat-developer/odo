/*
 * odo dev
 *
 * API interface for 'odo dev'
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Image struct {
	Name string `json:"name"`

	ImageName string `json:"imageName"`

	Args []string `json:"args"`

	BuildContext string `json:"buildContext"`

	RootRequired bool `json:"rootRequired"`

	Uri string `json:"uri"`

	AutoBuild string `json:"autoBuild"`

	// true if the image is not referenced in any command
	Orphan bool `json:"orphan"`
}

// AssertImageRequired checks if the required fields are not zero-ed
func AssertImageRequired(obj Image) error {
	elements := map[string]interface{}{
		"name":         obj.Name,
		"imageName":    obj.ImageName,
		"args":         obj.Args,
		"buildContext": obj.BuildContext,
		"rootRequired": obj.RootRequired,
		"uri":          obj.Uri,
		"autoBuild":    obj.AutoBuild,
		"orphan":       obj.Orphan,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseImageRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Image (e.g. [][]Image), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseImageRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aImage, ok := obj.(Image)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertImageRequired(aImage)
	})
}
