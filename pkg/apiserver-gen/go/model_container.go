/*
 * odo dev
 *
 * API interface for 'odo dev'
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Container struct {
	Name string `json:"name"`

	Image string `json:"image"`

	Command []string `json:"command"`

	Args []string `json:"args"`

	MemoryRequest string `json:"memoryRequest"`

	MemoryLimit string `json:"memoryLimit"`

	CpuRequest string `json:"cpuRequest"`

	CpuLimit string `json:"cpuLimit"`

	VolumeMounts []VolumeMount `json:"volumeMounts"`
}

// AssertContainerRequired checks if the required fields are not zero-ed
func AssertContainerRequired(obj Container) error {
	elements := map[string]interface{}{
		"name":          obj.Name,
		"image":         obj.Image,
		"command":       obj.Command,
		"args":          obj.Args,
		"memoryRequest": obj.MemoryRequest,
		"memoryLimit":   obj.MemoryLimit,
		"cpuRequest":    obj.CpuRequest,
		"cpuLimit":      obj.CpuLimit,
		"volumeMounts":  obj.VolumeMounts,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.VolumeMounts {
		if err := AssertVolumeMountRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseContainerRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Container (e.g. [][]Container), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseContainerRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aContainer, ok := obj.(Container)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertContainerRequired(aContainer)
	})
}
