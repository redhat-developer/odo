// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/component/interface.go

// Package component is a generated GoMock package.
package component

import (
	parser "github.com/devfile/library/pkg/devfile/parser"
	gomock "github.com/golang/mock/gomock"
	envinfo "github.com/redhat-developer/odo/pkg/envinfo"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// NewComponentFullDescriptionFromClientAndLocalConfigProvider mocks base method
func (m *MockClient) NewComponentFullDescriptionFromClientAndLocalConfigProvider(envInfo *envinfo.EnvSpecificInfo, componentName, applicationName, projectName, context string) (*ComponentFullDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewComponentFullDescriptionFromClientAndLocalConfigProvider", envInfo, componentName, applicationName, projectName, context)
	ret0, _ := ret[0].(*ComponentFullDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewComponentFullDescriptionFromClientAndLocalConfigProvider indicates an expected call of NewComponentFullDescriptionFromClientAndLocalConfigProvider
func (mr *MockClientMockRecorder) NewComponentFullDescriptionFromClientAndLocalConfigProvider(envInfo, componentName, applicationName, projectName, context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewComponentFullDescriptionFromClientAndLocalConfigProvider", reflect.TypeOf((*MockClient)(nil).NewComponentFullDescriptionFromClientAndLocalConfigProvider), envInfo, componentName, applicationName, projectName, context)
}

// List mocks base method
func (m *MockClient) List(applicationSelector string) (ComponentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", applicationSelector)
	ret0, _ := ret[0].(ComponentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClientMockRecorder) List(applicationSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), applicationSelector)
}

// ListDevfileComponentsInPath mocks base method
func (m *MockClient) ListDevfileComponentsInPath(paths []string) ([]Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevfileComponentsInPath", paths)
	ret0, _ := ret[0].([]Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevfileComponentsInPath indicates an expected call of ListDevfileComponentsInPath
func (mr *MockClientMockRecorder) ListDevfileComponentsInPath(paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevfileComponentsInPath", reflect.TypeOf((*MockClient)(nil).ListDevfileComponentsInPath), paths)
}

// Exists mocks base method
func (m *MockClient) Exists(componentName, applicationName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", componentName, applicationName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockClientMockRecorder) Exists(componentName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), componentName, applicationName)
}

// GetComponentNames mocks base method
func (m *MockClient) GetComponentNames(applicationName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentNames", applicationName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentNames indicates an expected call of GetComponentNames
func (mr *MockClientMockRecorder) GetComponentNames(applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentNames", reflect.TypeOf((*MockClient)(nil).GetComponentNames), applicationName)
}

// GetComponentFromDevfile mocks base method
func (m *MockClient) GetComponentFromDevfile(info *envinfo.EnvSpecificInfo) (Component, parser.DevfileObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentFromDevfile", info)
	ret0, _ := ret[0].(Component)
	ret1, _ := ret[1].(parser.DevfileObj)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentFromDevfile indicates an expected call of GetComponentFromDevfile
func (mr *MockClientMockRecorder) GetComponentFromDevfile(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentFromDevfile", reflect.TypeOf((*MockClient)(nil).GetComponentFromDevfile), info)
}

// GetComponentState mocks base method
func (m *MockClient) GetComponentState(componentName, applicationName string) State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentState", componentName, applicationName)
	ret0, _ := ret[0].(State)
	return ret0
}

// GetComponentState indicates an expected call of GetComponentState
func (mr *MockClientMockRecorder) GetComponentState(componentName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentState", reflect.TypeOf((*MockClient)(nil).GetComponentState), componentName, applicationName)
}

// GetComponent mocks base method
func (m *MockClient) GetComponent(componentName, applicationName string) (Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent", componentName, applicationName)
	ret0, _ := ret[0].(Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponent indicates an expected call of GetComponent
func (mr *MockClientMockRecorder) GetComponent(componentName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockClient)(nil).GetComponent), componentName, applicationName)
}

// GetPushedComponents mocks base method
func (m *MockClient) GetPushedComponents(applicationName string) (map[string]PushedComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedComponents", applicationName)
	ret0, _ := ret[0].(map[string]PushedComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushedComponents indicates an expected call of GetPushedComponents
func (mr *MockClientMockRecorder) GetPushedComponents(applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedComponents", reflect.TypeOf((*MockClient)(nil).GetPushedComponents), applicationName)
}

// GetPushedComponent mocks base method
func (m *MockClient) GetPushedComponent(componentName, applicationName string) (PushedComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedComponent", componentName, applicationName)
	ret0, _ := ret[0].(PushedComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushedComponent indicates an expected call of GetPushedComponent
func (mr *MockClientMockRecorder) GetPushedComponent(componentName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedComponent", reflect.TypeOf((*MockClient)(nil).GetPushedComponent), componentName, applicationName)
}

// CheckDefaultProject mocks base method
func (m *MockClient) CheckDefaultProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDefaultProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDefaultProject indicates an expected call of CheckDefaultProject
func (mr *MockClientMockRecorder) CheckDefaultProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDefaultProject", reflect.TypeOf((*MockClient)(nil).CheckDefaultProject), name)
}
