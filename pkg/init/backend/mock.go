// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/init/backend/interface.go

// Package backend is a generated GoMock package.
package backend

import (
	reflect "reflect"

	v1alpha2 "github.com/devfile/api/v2/pkg/apis/workspaces/v1alpha2"
	parser "github.com/devfile/library/pkg/devfile/parser"
	gomock "github.com/golang/mock/gomock"
)

// MockInitBackend is a mock of InitBackend interface.
type MockInitBackend struct {
	ctrl     *gomock.Controller
	recorder *MockInitBackendMockRecorder
}

// MockInitBackendMockRecorder is the mock recorder for MockInitBackend.
type MockInitBackendMockRecorder struct {
	mock *MockInitBackend
}

// NewMockInitBackend creates a new mock instance.
func NewMockInitBackend(ctrl *gomock.Controller) *MockInitBackend {
	mock := &MockInitBackend{ctrl: ctrl}
	mock.recorder = &MockInitBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitBackend) EXPECT() *MockInitBackendMockRecorder {
	return m.recorder
}

// PersonalizeName mocks base method.
func (m *MockInitBackend) PersonalizeName(devfile parser.DevfileObj, flags map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonalizeName", devfile, flags)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonalizeName indicates an expected call of PersonalizeName.
func (mr *MockInitBackendMockRecorder) PersonalizeName(devfile, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonalizeName", reflect.TypeOf((*MockInitBackend)(nil).PersonalizeName), devfile, flags)
}

// SelectDevfile mocks base method.
func (m *MockInitBackend) SelectDevfile(flags map[string]string) (bool, *DevfileLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDevfile", flags)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*DevfileLocation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectDevfile indicates an expected call of SelectDevfile.
func (mr *MockInitBackendMockRecorder) SelectDevfile(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDevfile", reflect.TypeOf((*MockInitBackend)(nil).SelectDevfile), flags)
}

// SelectStarterProject mocks base method.
func (m *MockInitBackend) SelectStarterProject(devfile parser.DevfileObj, flags map[string]string) (bool, *v1alpha2.StarterProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStarterProject", devfile, flags)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*v1alpha2.StarterProject)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectStarterProject indicates an expected call of SelectStarterProject.
func (mr *MockInitBackendMockRecorder) SelectStarterProject(devfile, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStarterProject", reflect.TypeOf((*MockInitBackend)(nil).SelectStarterProject), devfile, flags)
}

// Validate mocks base method.
func (m *MockInitBackend) Validate(flags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockInitBackendMockRecorder) Validate(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockInitBackend)(nil).Validate), flags)
}
