// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/init/backend/interface.go

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	v1alpha2 "github.com/devfile/api/v2/pkg/apis/workspaces/v1alpha2"
	parser "github.com/devfile/library/pkg/devfile/parser"
	gomock "github.com/golang/mock/gomock"
	api "github.com/redhat-developer/odo/pkg/api"
	filesystem "github.com/redhat-developer/odo/pkg/testingutil/filesystem"
)

// MockInitBackend is a mock of InitBackend interface.
type MockInitBackend struct {
	ctrl     *gomock.Controller
	recorder *MockInitBackendMockRecorder
}

// MockInitBackendMockRecorder is the mock recorder for MockInitBackend.
type MockInitBackendMockRecorder struct {
	mock *MockInitBackend
}

// NewMockInitBackend creates a new mock instance.
func NewMockInitBackend(ctrl *gomock.Controller) *MockInitBackend {
	mock := &MockInitBackend{ctrl: ctrl}
	mock.recorder = &MockInitBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitBackend) EXPECT() *MockInitBackendMockRecorder {
	return m.recorder
}

// HandleApplicationPorts mocks base method.
func (m *MockInitBackend) HandleApplicationPorts(devfileobj parser.DevfileObj, ports []int, flags map[string]string) (parser.DevfileObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleApplicationPorts", devfileobj, ports, flags)
	ret0, _ := ret[0].(parser.DevfileObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleApplicationPorts indicates an expected call of HandleApplicationPorts.
func (mr *MockInitBackendMockRecorder) HandleApplicationPorts(devfileobj, ports, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleApplicationPorts", reflect.TypeOf((*MockInitBackend)(nil).HandleApplicationPorts), devfileobj, ports, flags)
}

// PersonalizeDevfileConfig mocks base method.
func (m *MockInitBackend) PersonalizeDevfileConfig(devfileobj parser.DevfileObj) (parser.DevfileObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonalizeDevfileConfig", devfileobj)
	ret0, _ := ret[0].(parser.DevfileObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonalizeDevfileConfig indicates an expected call of PersonalizeDevfileConfig.
func (mr *MockInitBackendMockRecorder) PersonalizeDevfileConfig(devfileobj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonalizeDevfileConfig", reflect.TypeOf((*MockInitBackend)(nil).PersonalizeDevfileConfig), devfileobj)
}

// PersonalizeName mocks base method.
func (m *MockInitBackend) PersonalizeName(devfile parser.DevfileObj, flags map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonalizeName", devfile, flags)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonalizeName indicates an expected call of PersonalizeName.
func (mr *MockInitBackendMockRecorder) PersonalizeName(devfile, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonalizeName", reflect.TypeOf((*MockInitBackend)(nil).PersonalizeName), devfile, flags)
}

// SelectDevfile mocks base method.
func (m *MockInitBackend) SelectDevfile(ctx context.Context, flags map[string]string, fs filesystem.Filesystem, dir string) (*api.DetectionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDevfile", ctx, flags, fs, dir)
	ret0, _ := ret[0].(*api.DetectionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDevfile indicates an expected call of SelectDevfile.
func (mr *MockInitBackendMockRecorder) SelectDevfile(ctx, flags, fs, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDevfile", reflect.TypeOf((*MockInitBackend)(nil).SelectDevfile), ctx, flags, fs, dir)
}

// SelectStarterProject mocks base method.
func (m *MockInitBackend) SelectStarterProject(devfile parser.DevfileObj, flags map[string]string) (*v1alpha2.StarterProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStarterProject", devfile, flags)
	ret0, _ := ret[0].(*v1alpha2.StarterProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectStarterProject indicates an expected call of SelectStarterProject.
func (mr *MockInitBackendMockRecorder) SelectStarterProject(devfile, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStarterProject", reflect.TypeOf((*MockInitBackend)(nil).SelectStarterProject), devfile, flags)
}

// Validate mocks base method.
func (m *MockInitBackend) Validate(flags map[string]string, fs filesystem.Filesystem, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", flags, fs, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockInitBackendMockRecorder) Validate(flags, fs, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockInitBackend)(nil).Validate), flags, fs, dir)
}
