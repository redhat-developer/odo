// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/preference/preference.go

// Package preference is a generated GoMock package.
package preference

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BuildTimeout mocks base method.
func (m *MockClient) BuildTimeout() *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTimeout")
	ret0, _ := ret[0].(*int)
	return ret0
}

// BuildTimeout indicates an expected call of BuildTimeout.
func (mr *MockClientMockRecorder) BuildTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTimeout", reflect.TypeOf((*MockClient)(nil).BuildTimeout))
}

// ConsentTelemetry mocks base method.
func (m *MockClient) ConsentTelemetry() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsentTelemetry")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// ConsentTelemetry indicates an expected call of ConsentTelemetry.
func (mr *MockClientMockRecorder) ConsentTelemetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentTelemetry", reflect.TypeOf((*MockClient)(nil).ConsentTelemetry))
}

// DeleteConfiguration mocks base method.
func (m *MockClient) DeleteConfiguration(parameter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguration", parameter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfiguration indicates an expected call of DeleteConfiguration.
func (mr *MockClientMockRecorder) DeleteConfiguration(parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguration", reflect.TypeOf((*MockClient)(nil).DeleteConfiguration), parameter)
}

// EphemeralSourceVolume mocks base method.
func (m *MockClient) EphemeralSourceVolume() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EphemeralSourceVolume")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// EphemeralSourceVolume indicates an expected call of EphemeralSourceVolume.
func (mr *MockClientMockRecorder) EphemeralSourceVolume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EphemeralSourceVolume", reflect.TypeOf((*MockClient)(nil).EphemeralSourceVolume))
}

// GetBuildTimeout mocks base method.
func (m *MockClient) GetBuildTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetBuildTimeout indicates an expected call of GetBuildTimeout.
func (mr *MockClientMockRecorder) GetBuildTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildTimeout", reflect.TypeOf((*MockClient)(nil).GetBuildTimeout))
}

// GetConsentTelemetry mocks base method.
func (m *MockClient) GetConsentTelemetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsentTelemetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetConsentTelemetry indicates an expected call of GetConsentTelemetry.
func (mr *MockClientMockRecorder) GetConsentTelemetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsentTelemetry", reflect.TypeOf((*MockClient)(nil).GetConsentTelemetry))
}

// GetEphemeralSourceVolume mocks base method.
func (m *MockClient) GetEphemeralSourceVolume() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEphemeralSourceVolume")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEphemeralSourceVolume indicates an expected call of GetEphemeralSourceVolume.
func (mr *MockClientMockRecorder) GetEphemeralSourceVolume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEphemeralSourceVolume", reflect.TypeOf((*MockClient)(nil).GetEphemeralSourceVolume))
}

// GetNamePrefix mocks base method.
func (m *MockClient) GetNamePrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamePrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamePrefix indicates an expected call of GetNamePrefix.
func (mr *MockClientMockRecorder) GetNamePrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamePrefix", reflect.TypeOf((*MockClient)(nil).GetNamePrefix))
}

// GetPushTimeout mocks base method.
func (m *MockClient) GetPushTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPushTimeout indicates an expected call of GetPushTimeout.
func (mr *MockClientMockRecorder) GetPushTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushTimeout", reflect.TypeOf((*MockClient)(nil).GetPushTimeout))
}

// GetRegistryCacheTime mocks base method.
func (m *MockClient) GetRegistryCacheTime() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryCacheTime")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRegistryCacheTime indicates an expected call of GetRegistryCacheTime.
func (mr *MockClientMockRecorder) GetRegistryCacheTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryCacheTime", reflect.TypeOf((*MockClient)(nil).GetRegistryCacheTime))
}

// GetTimeout mocks base method.
func (m *MockClient) GetTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockClientMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockClient)(nil).GetTimeout))
}

// GetUpdateNotification mocks base method.
func (m *MockClient) GetUpdateNotification() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateNotification")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUpdateNotification indicates an expected call of GetUpdateNotification.
func (mr *MockClientMockRecorder) GetUpdateNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateNotification", reflect.TypeOf((*MockClient)(nil).GetUpdateNotification))
}

// IsSet mocks base method.
func (m *MockClient) IsSet(parameter string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet", parameter)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet.
func (mr *MockClientMockRecorder) IsSet(parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockClient)(nil).IsSet), parameter)
}

// NamePrefix mocks base method.
func (m *MockClient) NamePrefix() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamePrefix")
	ret0, _ := ret[0].(*string)
	return ret0
}

// NamePrefix indicates an expected call of NamePrefix.
func (mr *MockClientMockRecorder) NamePrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamePrefix", reflect.TypeOf((*MockClient)(nil).NamePrefix))
}

// NewPreferenceList mocks base method.
func (m *MockClient) NewPreferenceList() PreferenceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPreferenceList")
	ret0, _ := ret[0].(PreferenceList)
	return ret0
}

// NewPreferenceList indicates an expected call of NewPreferenceList.
func (mr *MockClientMockRecorder) NewPreferenceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPreferenceList", reflect.TypeOf((*MockClient)(nil).NewPreferenceList))
}

// PushTimeout mocks base method.
func (m *MockClient) PushTimeout() *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTimeout")
	ret0, _ := ret[0].(*int)
	return ret0
}

// PushTimeout indicates an expected call of PushTimeout.
func (mr *MockClientMockRecorder) PushTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTimeout", reflect.TypeOf((*MockClient)(nil).PushTimeout))
}

// RegistryHandler mocks base method.
func (m *MockClient) RegistryHandler(operation, registryName, registryURL string, forceFlag, isSecure bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryHandler", operation, registryName, registryURL, forceFlag, isSecure)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryHandler indicates an expected call of RegistryHandler.
func (mr *MockClientMockRecorder) RegistryHandler(operation, registryName, registryURL, forceFlag, isSecure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryHandler", reflect.TypeOf((*MockClient)(nil).RegistryHandler), operation, registryName, registryURL, forceFlag, isSecure)
}

// RegistryList mocks base method.
func (m *MockClient) RegistryList() *[]Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryList")
	ret0, _ := ret[0].(*[]Registry)
	return ret0
}

// RegistryList indicates an expected call of RegistryList.
func (mr *MockClientMockRecorder) RegistryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryList", reflect.TypeOf((*MockClient)(nil).RegistryList))
}

// RegistryNameExists mocks base method.
func (m *MockClient) RegistryNameExists(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryNameExists", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegistryNameExists indicates an expected call of RegistryNameExists.
func (mr *MockClientMockRecorder) RegistryNameExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryNameExists", reflect.TypeOf((*MockClient)(nil).RegistryNameExists), name)
}

// SetConfiguration mocks base method.
func (m *MockClient) SetConfiguration(parameter, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfiguration", parameter, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfiguration indicates an expected call of SetConfiguration.
func (mr *MockClientMockRecorder) SetConfiguration(parameter, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfiguration", reflect.TypeOf((*MockClient)(nil).SetConfiguration), parameter, value)
}

// Timeout mocks base method.
func (m *MockClient) Timeout() *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(*int)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockClientMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockClient)(nil).Timeout))
}

// UpdateNotification mocks base method.
func (m *MockClient) UpdateNotification() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockClientMockRecorder) UpdateNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockClient)(nil).UpdateNotification))
}
