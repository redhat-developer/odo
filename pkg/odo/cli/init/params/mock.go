// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/odo/cli/init/params/interface.go

// Package params is a generated GoMock package.
package params

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParamsBuilder is a mock of ParamsBuilder interface.
type MockParamsBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockParamsBuilderMockRecorder
}

// MockParamsBuilderMockRecorder is the mock recorder for MockParamsBuilder.
type MockParamsBuilderMockRecorder struct {
	mock *MockParamsBuilder
}

// NewMockParamsBuilder creates a new mock instance.
func NewMockParamsBuilder(ctrl *gomock.Controller) *MockParamsBuilder {
	mock := &MockParamsBuilder{ctrl: ctrl}
	mock.recorder = &MockParamsBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamsBuilder) EXPECT() *MockParamsBuilderMockRecorder {
	return m.recorder
}

// IsAdequate mocks base method.
func (m *MockParamsBuilder) IsAdequate(flags map[string]string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdequate", flags)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdequate indicates an expected call of IsAdequate.
func (mr *MockParamsBuilderMockRecorder) IsAdequate(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdequate", reflect.TypeOf((*MockParamsBuilder)(nil).IsAdequate), flags)
}

// ParamsBuild mocks base method.
func (m *MockParamsBuilder) ParamsBuild() (InitParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamsBuild")
	ret0, _ := ret[0].(InitParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParamsBuild indicates an expected call of ParamsBuild.
func (mr *MockParamsBuilderMockRecorder) ParamsBuild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsBuild", reflect.TypeOf((*MockParamsBuilder)(nil).ParamsBuild))
}
